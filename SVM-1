"""
线性 非线性都可以做
监督 非监督 半监督都可以做

SVM最支持的是分类

SVM板块：
svm.LinearSVC：线性支持向量分类
svm.LinearSVR：线性支持向量回归
svm.SVC：非线性多维支持向量分类
svm.SVR：非线性多维支持向量回归

SVM板块功能：
svm.libsvm.cross_validation：SVM专用的交叉验证
svm.libsvm.decision_function：SVM专用的预测边际函数
svm.libsvm.fit：使用 libsvm 训练模型
svm.libsvm.predict：给定模型预测 X 的目标值
svm.libsvm.predict_proba：预测概率

属性 kernel（找出超平面的函数）：
linear：线性核函数
rbf：高斯经向基核函数
"""

"""
sklearn.svm.SVC(C=1.0, kernel=’rbf’, degree=3, gamma=’auto_deprecated’, coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape=’ovr’, random_state=None)

"""

from sklearn.datasets import make_blobs
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import numpy as np

# cluster_std 可以拉开不同类的点之间的距离
X, y = make_blobs(
    n_samples=50,
    centers=2,
    random_state=0,
    cluster_std=0.6
)

# 查看绘制的随机点
"""
plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap="rainbow")
plt.xticks([])
plt.yticks([])
plt.show()
"""


def plot_svc_decision_function(model, ax=None):
    if ax is None:
        # 将散点图变为一个对象
        ax = plt.gca()  # 获取当前子图，如果不存在创建新子图

    # 要画决策树边界，必须要有网格
    xlim = ax.get_xlim()
    ylim = ax.get_ylim()  # 默认创建（0.0, 1.0）范围内的横纵坐标

    x = np.linspace(xlim[0], xlim[1], 30)
    y = np.linspace(ylim[0], ylim[1], 30)
    X, Y = np.meshgrid(x, y)
    # meshgrid 将特征向量转换为特征矩阵的函数 变为 30*30 的矩阵
    # 核心是将两个特征向量广播，获取 y.shape x.shape 点的横纵坐标

    xy = np.vstack([X.ravel(), Y.ravel()]).T
    # ravel 是降维函数，vstack 将多个结构一致的一维数组按行堆叠起来
    # xy 就是已经形成的网格，遍布在画布上的密集点

    """
    decision_function 接口，返回每个输入的样本所对应的到决策边界的距离
    reshape 将该距离转换为 axisx 的结构
    """
    P = model.decision_function(xy).reshape(X.shape)
    # print(P)

    # 画决策边界和平行于决策边界的超平面
    # contour 画超平面需要：网格横坐标、网格纵坐标、点到边界的距离
    ax.contour(X, Y, P, colors="k", levels=[-1, 0, 1], alpha=0.5, linestyles=["--", "-", "--"])

    # 设置横纵坐标
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)


# 建模，SVC得到决策边界
clf = SVC(kernel="linear").fit(X, y)
plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap="rainbow")
plot_svc_decision_function(clf)
plt.show()

# 假设数据是环形的
from sklearn.datasets import make_circles

X, y = make_circles(
    n_samples=100,
    factor=0.1,
    noise=0.1
)
# print(X.shape)
# print(y.shape)

# 查看绘制的随机点
"""
plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap="rainbow")
plt.xticks([])
plt.yticks([])
plt.show()
"""

# 进行试验，线性的SVC模型是不适合的

"""
环形数据解决方法：
"""
# 定义一个由 x 计算出来的新维度 r
r = np.exp(-(X ** 2).sum(1))
rlim = np.linspace(min(r), max(r), 0.2)

# 绘制一个三维图
"""
from mpl_toolkits import mplot3d

# elev 表示上下旋转的角度
# azim 表示平行旋转的角度

def plot_3D(elev=30, azim=30, X=X, y=y):
    ax = plt.subplot(projection="3d")
    # X[:, 0], X[:, 1], r 对应 x y z 轴
    ax.scatter3D(X[:, 0], X[:, 1], r, c=y, s=50, cmap="rainbow")
    # view_init 显示3D图的属性
    ax.view_init(elev=elev, azim=azim)
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.set_zlabel("r")
    plt.show()
plot_3D()
"""

clf = SVC(kernel="rbf").fit(X, y)
plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap="rainbow")
plot_svc_decision_function(clf)
plt.show()


