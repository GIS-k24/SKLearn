"""
降维是：为了减小计算的成本
        同时方便数据可视化
        
降维算法：都在 decomposition 模块中

特征矩阵进行降维后，生成的新矩阵中的信息组合已经无法识别了，不再具有可读性

PCA 和 SVD
PCA就是样本方差（信息衡量指标），越大信息量就越多
PCA不适合探索标签和特征的关系

"""

"""
PCA：
sklearn.decomposition.PCA(n_components=None, copy=True, whiten=False, svd_solver=’auto’, tol=0.0, iterated_power=’auto’, random_state=None)
参数：
n_components：降维后需要的纬度   数值不能太大也不能太小  在需要可视化是得降到3维以下

接口：
explained_variance_：查看 降维后每个新特征向量上所带的信息量大小（可解释方差的大小）
explained_variance_ratio_：查看 降维后每个新特征向量所占的信息量占原始数据总信息量的百分比
"""

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA

iris = load_iris()
# print(iris)

data = iris.data
target = iris.target
print(iris.target_names)

# 查看数据结构
import pandas as pd
# print(pd.DataFrame(data))

# 进行降维
# 方法一
pca = PCA(n_components=2)
pca = pca.fit(data)
X_dr = pca.transform(data)

# 方法二
# pca = PCA(n_components=2).fit_transform(data)

print(X_dr[target == 0, 0])
# print(pd.DataFrame(X_dr))

plt.scatter(X_dr[target == 0, 0], X_dr[target == 0, 1], c='red', label=iris.target_names[0])
plt.scatter(X_dr[target == 1, 0], X_dr[target == 1, 1], c='blue', label=iris.target_names[1])
plt.scatter(X_dr[target == 2, 0], X_dr[target == 2, 1], c='green', label=iris.target_names[2])
plt.legend()
plt.title("PCA of IRIS datasets")
plt.show()

print(pca.explained_variance_)
print(pca.explained_variance_ratio_)
print(pca.explained_variance_ratio_.sum())

